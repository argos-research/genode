// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle.proto

#ifndef PROTOBUF_vehicle_2eproto__INCLUDED
#define PROTOBUF_vehicle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "position.pb.h"
// @@protoc_insertion_point(includes)
namespace protobuf {
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class Vehicle;
class VehicleDefaultTypeInternal;
extern VehicleDefaultTypeInternal _Vehicle_default_instance_;
}  // namespace protobuf

namespace protobuf {

namespace protobuf_vehicle_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_vehicle_2eproto

// ===================================================================

class Vehicle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.Vehicle) */ {
 public:
  Vehicle();
  virtual ~Vehicle();

  Vehicle(const Vehicle& from);

  inline Vehicle& operator=(const Vehicle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vehicle& default_instance();

  static inline const Vehicle* internal_default_instance() {
    return reinterpret_cast<const Vehicle*>(
               &_Vehicle_default_instance_);
  }

  void Swap(Vehicle* other);

  // implements Message ----------------------------------------------

  inline Vehicle* New() const PROTOBUF_FINAL { return New(NULL); }

  Vehicle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vehicle& from);
  void MergeFrom(const Vehicle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vehicle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .protobuf.Position position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::protobuf::Position& position() const;
  ::protobuf::Position* mutable_position();
  ::protobuf::Position* release_position();
  void set_allocated_position(::protobuf::Position* position);

  // required float yaw = 3;
  bool has_yaw() const;
  void clear_yaw();
  static const int kYawFieldNumber = 3;
  float yaw() const;
  void set_yaw(float value);

  // @@protoc_insertion_point(class_scope:protobuf.Vehicle)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_position();
  void clear_has_position();
  void set_has_yaw();
  void clear_has_yaw();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::protobuf::Position* position_;
  float yaw_;
  friend struct  protobuf_vehicle_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Vehicle

// required string name = 1;
inline bool Vehicle::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vehicle::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vehicle::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vehicle::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Vehicle::name() const {
  // @@protoc_insertion_point(field_get:protobuf.Vehicle.name)
  return name_.GetNoArena();
}
inline void Vehicle::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.Vehicle.name)
}
#if LANG_CXX11
inline void Vehicle::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.Vehicle.name)
}
#endif
inline void Vehicle::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.Vehicle.name)
}
inline void Vehicle::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.Vehicle.name)
}
inline ::std::string* Vehicle::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:protobuf.Vehicle.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vehicle::release_name() {
  // @@protoc_insertion_point(field_release:protobuf.Vehicle.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vehicle::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Vehicle.name)
}

// required .protobuf.Position position = 2;
inline bool Vehicle::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vehicle::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vehicle::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vehicle::clear_position() {
  if (position_ != NULL) position_->::protobuf::Position::Clear();
  clear_has_position();
}
inline const ::protobuf::Position& Vehicle::position() const {
  // @@protoc_insertion_point(field_get:protobuf.Vehicle.position)
  return position_ != NULL ? *position_
                         : *::protobuf::Position::internal_default_instance();
}
inline ::protobuf::Position* Vehicle::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::protobuf::Position;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.Vehicle.position)
  return position_;
}
inline ::protobuf::Position* Vehicle::release_position() {
  // @@protoc_insertion_point(field_release:protobuf.Vehicle.position)
  clear_has_position();
  ::protobuf::Position* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Vehicle::set_allocated_position(::protobuf::Position* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Vehicle.position)
}

// required float yaw = 3;
inline bool Vehicle::has_yaw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vehicle::set_has_yaw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vehicle::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vehicle::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline float Vehicle::yaw() const {
  // @@protoc_insertion_point(field_get:protobuf.Vehicle.yaw)
  return yaw_;
}
inline void Vehicle::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Vehicle.yaw)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vehicle_2eproto__INCLUDED
